# Partial can be applied for
class, struct, interface



Restrictions
------------------
public partial class A { }
//public class A { }  // Error, must also be marked partial

All partial-type definitions meant to be parts of the same type must be defined in the same assembly and the same module (.exe or .dll file). 
Partial definitions cannot span multiple modules.

we cant modify particlass access modifiers. it will give compiler error



[SerializableAttribute]
partial class Moon { }

[ObsoleteAttribute]
partial class Moon { }


above code equalent to below


[SerializableAttribute]
[ObsoleteAttribute]
partial class Moon { }



partial class Earth : Planet, IRotate { }
partial class Earth : IRevolve { }

They are equivalent to the following declarations

class Earth : Planet, IRotate, IRevolve { }



Nested partial types
--------------------------
partial class ClassWithNestedClass
{
    partial class NestedClass { }
}

partial class ClassWithNestedClass
{
    partial class NestedClass { }
}


Partial struct and Interfaces
======================================
partial interface ITest
{
    void Interface_Test();
}

partial interface ITest
{
    void Interface_Test2();
}

partial struct S1
{
    void Struct_Test() { }
}

partial struct S1
{
    void Struct_Test2() { }
}



Partial Methods
============================
A partial class or struct may contain a partial method. One part of the class contains the signature of the method. An optional implementation may be defined in the same part or another part. If the implementation is not supplied, then the method and all calls to the method are removed at compile time.

Partial methods enable the implementer of one part of a class to define a method, similar to an event. The implementer of the other part of the class can decide whether to implement the method or not. If the method is not implemented, then the compiler removes the method signature and all calls to the method. The calls to the method, including any results that would occur from evaluation of arguments in the calls, have no effect at run time. Therefore, any code in the partial class can freely use a partial method, even if the implementation is not supplied. No compile-time or run-time errors will result if the method is called but not implemented.

Partial methods are especially useful as a way to customize generated code. They allow for a method name and signature to be reserved, so that generated code can call the method but the developer can decide whether to implement the method. Much like partial classes, partial methods enable code created by a code generator and code created by a human developer to work together without run-time costs.

A partial method declaration consists of two parts: the definition, and the implementation. These may be in separate parts of a partial class, or in the same part. If there is no implementation declaration, then the compiler optimizes away both the defining declaration and all calls to the method.


// Definition in file1.cs  
partial void onNameChanged();  

// Implementation in file2.cs  
partial void onNameChanged()  
{  
  // method body  
}


Partial methods can have ref but not out parameters.

Partial methods are implicitly private, and therefore they cannot be virtual.