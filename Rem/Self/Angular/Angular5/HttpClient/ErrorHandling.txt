Two types of errors can occur
---------------------------------------
1. The server backend might reject the request, returning an HTTP response with a 
status code such as 404 or 500. These are error responses.
2. something could go wrong on the client-side such as a 
network error that prevents the request from completing successfully or 
an exception thrown in an RxJS operator.These errors produce JavaScript ErrorEvent objects.

The HttpClient captures both kinds of errors in its HttpErrorResponse 
and you can inspect that response to figure out what really happened.

Note: Error inspection, interpretation, and resolution is something you want to do in the service,
 not in the component.


How to handle errors?
--------------------
import { Observable } from 'rxjs/Observable';
import { ErrorObservable } from 'rxjs/observable/ErrorObservable';
import { catchError, retry } from 'rxjs/operators';

private handleError(error: HttpErrorResponse) {
  if (error.error instanceof ErrorEvent) {
    // A client-side or network error occurred. Handle it accordingly.
    console.error('An error occurred:', error.error.message);
  } else {
    // The backend returned an unsuccessful response code.
    // The response body may contain clues as to what went wrong,
    console.error(
      `Backend returned code ${error.status}, ` +
      `body was: ${error.error}`);
  }
  // return an ErrorObservable with a user-facing error message
  return new ErrorObservable('Something bad happened; please try again later.');
};


Now you take the Observables returned by the HttpClient methods
and pipe them through to the error handler.

getConfig() {
  return this.http.get<Config>(this.configUrl)
    .pipe(
      catchError(this.handleError)
    );
}


 retry()
-----------------
getConfig() {
  return this.http.get<Config>(this.configUrl)
    .pipe(
      retry(3), // retry a failed request up to 3 times
      catchError(this.handleError) // then handle the error
    );
}