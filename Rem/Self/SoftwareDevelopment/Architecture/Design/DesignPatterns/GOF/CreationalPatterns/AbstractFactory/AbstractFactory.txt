abstract factory
----------------------

The factory method pattern discussed in the preceding chapter comes in handy when you wish to
instantiate a class. However, at times you will need to create a family of objects that are related. That’s where
the abstract factory pattern comes into the picture.

The job of an
Abstract Factory is to define an interface for creating a set of products.

NOTE: Often the methods of an Abstract Factory are implemented as factory methods.

AbstractFactory and FactoryMethod both  are used to decouple applications from specific implementations.

Abstract factory pattern provides interface for creating families of related or dependent objects without specifying their concrete classes

# my defenation : it is factory for multiple simple factories
client will decoupled from concrete products

AbstractFactory provide interface to create families of products.

"Code for interface principle". because clients only knows interface.

The factory method pattern discussed in the preceding chapter allows a client to get an object without
specifying the class name. It is the job of the factory method to create an object of the intended class and
return it to the client. The abstract factory pattern extends this further and allows you to create families
of related objects. A family of objects is a set of objects that are usually used together or a set of objects that
are dependent on each other in some way.

Real .net example with abstract factory
-----------------------------------------------
The .NET framework comes with two ADO.NET data providers— SqlClient and OleDb . These
providers consist of objects such as connection , command , parameter , and data reader . As you might have
guessed, the objects from these two data providers make families of related objects. Thus,



Obstract factiory provides interfaces to implement concrete factories

Factory Method, and abstract factory are encapsulates object creation move away from the client.


Is that a Factory Method lurking inside the
Abstract Factory?

Good catch! Yes, often the methods of an Abstract Factory are
implemented as factory methods. It makes sense, right? The job of an
Abstract Factory is to define an interface for creating a set of products.
Each method in that interface is responsible for creating a concrete
product, and we implement a subclass of the Abstract Factory to
supply those implementations. So, factory methods are a natural way to
implement your product methods in your abstract factories.
Is












namespace DoFactory.GangOfFour.Abstract.Structural
{


  class MainApp

  {


    public static void Main()
    {
      // Abstract factory #1

      AbstractFactory factory1 = new ConcreteFactory1();
      Client client1 = new Client(factory1);
      client1.Run();

      // Abstract factory #2

      AbstractFactory factory2 = new ConcreteFactory2();
      Client client2 = new Client(factory2);
      client2.Run();

      // Wait for user input

      Console.ReadKey();
    }
  }

  /// <summary>

  /// The 'AbstractFactory' abstract class

  /// </summary>

  abstract class AbstractFactory

  {
    public abstract AbstractProductA CreateProductA();
    public abstract AbstractProductB CreateProductB();
  }




  class ConcreteFactory1 : AbstractFactory

  {
    public override AbstractProductA CreateProductA()
    {
      return new ProductA1();
    }
    public override AbstractProductB CreateProductB()
    {
      return new ProductB1();
    }
  }



  class ConcreteFactory2 : AbstractFactory

  {
    public override AbstractProductA CreateProductA()
    {
      return new ProductA2();
    }
    public override AbstractProductB CreateProductB()
    {
      return new ProductB2();
    }
  }



  abstract class AbstractProductA

  {
  }



  abstract class AbstractProductB

  {
    public abstract void Interact(AbstractProductA a);
  }




  class ProductA1 : AbstractProductA

  {
  }



  class ProductB1 : AbstractProductB

  {
    public override void Interact(AbstractProductA a)
    {
      Console.WriteLine(this.GetType().Name +
        " interacts with " + a.GetType().Name);
    }
  }


  class ProductA2 : AbstractProductA

  {
  }



  class ProductB2 : AbstractProductB

  {
    public override void Interact(AbstractProductA a)
    {
      Console.WriteLine(this.GetType().Name +
        " interacts with " + a.GetType().Name);
    }
  }



  class Client

  {
    private AbstractProductA _abstractProductA;
    private AbstractProductB _abstractProductB;

    // Constructor

    public Client(AbstractFactory factory)
    {
      _abstractProductB = factory.CreateProductB();
      _abstractProductA = factory.CreateProductA();
    }

    public void Run()
    {
      _abstractProductB.Interact(_abstractProductA);
    }
  }
}



Dis advantages of Abstract factory
----------------------------------------
1. Adding extra layer of complexity.iF it is really needed then use it
2. If Abstract factory interface modifies then all the clients will break, so while designing interface do proper care
