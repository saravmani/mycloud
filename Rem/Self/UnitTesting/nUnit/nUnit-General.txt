Key Points - TestFixture, Test, SetUp

The NUnit Framework caters a range of attributes that are used during unit tests.
They are used to define Test -Fixtures, Test methods, ExpectedException


when executing test cases in vsts 2013
vstest.executionengine.x86.exe process will get executed and vsts will be attached to this. it is 32 bit processor by default



VIsualstudio 2015
->Extension manager ->download "nunit templattes for visual studio"
->Extension manager ->download "nunit3 test adaptor"

above are taken from youtbe below video link
https://www.youtube.com/watch?v=0VbLAh51IoI


Parameterised unit testing
-------------------------------
http://www.smaclellan.com/posts/parameterized-tests-made-simple/


The AAA Syntax (Arrange, Act, Assert)

A very common approach to structuring your unit tests is using the AAA syntax.
The AAA syntax is only a way of structuring your unit tests, and is supported by any framework.

The basic idea is that you create all the dependencies required by your method under test (Arrange),
run your method under test (Act) and verify that the requirements of your test were met (Assert).



namespace Bank
{
  public class Account
  {
    private decimal balance;

    public void Deposit(decimal amount)
    {
      balance += amount;
    }

    public void Withdraw(decimal amount)
    {
      balance -= amount;
    }

    public void TransferFunds(Account destination, decimal amount)
    {
    }

    public decimal Balance
    {
      get { return balance; }
    }
  }
}
Now let?s write a test for this class ? AccountTest. The first method we will test is TransferFunds.

namespace Bank
{
  using NUnit.Framework;

  [TestFixture]
  public class AccountTest
  {
    [Test]
    public void TransferFunds()
    {
      Account source = new Account();
      source.Deposit(200m);

      Account destination = new Account();
      destination.Deposit(150m);

      source.TransferFunds(destination, 100m);

      Assert.AreEqual(250m, destination.Balance);
      Assert.AreEqual(100m, source.Balance);
    }
  }
}


[TestFixture] attribute associated with it ? this is the way to indicate that the class contains test code
(this attribute can be inherited).

The class has to be public and there are no restrictions on its superclass. The class also has to have a default constructor.
[Test] attribute associated with it ? this is an indication that it is a test method. Test methods have to
return void and take no parameters.
The Assert class defines a collection of methods used to check the post-conditions


Test exceptions
-------------------
[Test]
[ExpectedException(typeof(InsufficientFundsException))]
public void TransferWithInsufficientFunds()
{


addition to [Test] attribute has an [ExpectedException] attribute associated with it ?
this is the way to indicate that the test code is expecting an exception of a certain type;
if such an exception is not thrown during the execution ? the test will fail.



[Test]
[Ignore("Decide how to implement transaction management")]
public void TransferWithInsufficientFundsAtomicity()
{
  // code is the same
}

Compile and run ? yellow bar. Click on ?Tests Not Run? tab and you will see
bank.AccountTest.TransferWithInsufficientFundsAtomicity() in the list along with the Reason this test is ignored.




Looking at our test code we can see that some refactoring is in order. All test methods share a
common set of test objects. Let?s extract this initialization code into a setup method and reuse it in all of our tests.
The refactored version of our test class looks like this:

namespace Bank
{
  using NUnit.Framework;

  [TestFixture]
  public class AccountTest
  {
    Account source;
    Account destination;

    [SetUp]
    public void Init()
    {
      source = new Account();
      source.Deposit(200m);

      destination = new Account();
      destination.Deposit(150m);
    }

    [Test]
    public void TransferFunds()
    {
      source.TransferFunds(destination, 100m);

      Assert.AreEqual(250m, destination.Balance);
      Assert.AreEqual(100m, source.Balance);
    }

    [Test]
    [ExpectedException(typeof(InsufficientFundsException))]
    public void TransferWithInsufficientFunds()
    {
      source.TransferFunds(destination, 300m);
    }

    [Test]
    [Ignore("Decide how to implement transaction management")]
    public void TransferWithInsufficientFundsAtomicity()
    {
      try
      {
        source.TransferFunds(destination, 300m);
      }
      catch(InsufficientFundsException expected)
      {
      }

      Assert.AreEqual(200m, source.Balance);
      Assert.AreEqual(150m, destination.Balance);
    }
  }
}
Note that Init method has the common initialization code,
it has void return type, no parameters, and it is marked with [SetUp] attribute.


Testting MVC
-------------------


[Test]
public void TestDepartmentCreateRedirect()//To test redirect actioon
{
    var obj = new DepartmentController();
    RedirectToRouteResult result = obj.CreateActionMethod() as RedirectToRouteResult;
    Assert.That(result.RouteValues["action"], Is.EqualTo("Index"));
}

[Test]
    public void TestDepartmentIndex()
    {
        var obj =new DepartmentController();

        var actResult = obj.Index() as ViewResult;

        Assert.That(actResult.ViewName, Is.EqualTo("Index"));
    }
