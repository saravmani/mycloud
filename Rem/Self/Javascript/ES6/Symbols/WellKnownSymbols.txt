# asper my understanding wellknown symbols are already defined in javascript engine,
and we can use it to access the functionality it is refering

wellknown symbols used in meta programming.
meta programming means working deeply with jjavascritp objects. even javascript engine objects

Meta programming means look in deeply into javascript engine operates,objects, functions etc.,

Several symbols used to access some unique features of ES6. those are called wellknown symbols

Few wellknown symbols are - Symbol.tostringTag

Symbol.toStringTag
-----------------------------------------------------
let Blog=function(){    
};
Blog.prototype[Symbol.toStringTag]='BlogClass'; 
//Here we are telling javascript engine how to display the name of the Blog Class
//it alters the way of javascript engine calls the toString
let blog=new Blog();
console.log(blog.toString()); // [object Blog Class]

#i think monky patching of core js functions (ex: setTimeOut) also may called meta programming



let values=[8,12,16];
values[Symbol.isConcatSpreadable]=false;
console.log([].concat(values));
//[ [8, 12, 16] ]




let values=[8,12,16];
values[Symbol.toPrimitive]=function(hint){
    console.log(hint);
    return 42;
    };
    let sum=values+100;
    console.log(sum);//142
//# i guess when js engine converts array to primitive data type this function will get called


//# my idea is we can able to use the wellknown symbols to, change the existing functionalities in prototype
or object's property

ex:
var kknewTestSymbol = Symbol.for('article')
let article={
        title:'WhitefaceMountain',
        [kknewTestSymbol]:function(){
            console.log("dingdong");
        },
        anotherFunction:function()
        {
        return this[kknewTestSymbol]();
        }
    };

article.anotherFunction();//
article[kknewTestSymbol] = function()
{
    console.log("modified");
}
article.anotherFunction();//
