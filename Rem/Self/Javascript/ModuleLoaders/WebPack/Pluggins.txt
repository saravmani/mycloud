Plugins
--------------
Plugins used to customize webpackâ€™s build process in a variety of ways.
 A webpack plugin is a JavaScript object that has an apply property. 
 This apply property is called by the webpack compiler, giving access to the 
 entire compilation lifecycle. Webpack comes with a multiple built-in plugins

 usefull pluggins
 ----------------
 UglifyJS ,CompressionPlugin, ExtractTextWebpackPlugin, HtmlWebpackPlugin, CommonsChunkPlugin


CompressionPlugin
----------------------
CompressionPlugin builds gzip-ed version of bundles.
 Its possible to simply add server side compression e.g using nginx or expres compression plugin.
Server-side compression is not recommended because it addes load on CPU and increases
response time.

ExtractTextWebpackPlugin
--------------------------------
using ExtractTextWebpackPlugin. It moves all the required *.css modules in 
entry chunks into a separate CSS file. So your styles are no longer inlined into the JS bundle, 
but in a separate CSS file (styles.css). If your total stylesheet volume is big,
 it will be faster because the CSS bundle is loaded in parallel to the JS bundle.

 HtmlWebpackPlugin - add <style> to giveing html file
UglifyJS  - used for minification

 CommonsChunkPlugin
 -------------------------
 he CommonsChunkPlugin is built-in feature that creates a separate file (known as a chunk), 
 consisting of common modules shared between multiple entry points.
By separating common modules from bundles, the resulting chunked file can be
loaded once initially, and stored in cache for later use. 
This results in pagespeed optimizations as the browser can quickly serve the 
shared code from cache, rather than being forced to load a larger bundle 
whenever a new page is visited.

 new webpack.optimize.CommonsChunkPlugin({
     name: 'common',
     filename: 'common.js',
     chunks: ['home', 'dashboard']
   })

This code creates separate file: common.js which contains common modules from home and dashboard chunks.

