
Abstraction is the concept of describing something in simpler terms, 
i.e abstracting away the details, in order to focus on what is important 
(This is also seen in abstract art, for example, where the artist focuses on the 
building blocks of images, such as colour or shapes). 
The same idea translates to OOP by using an inheritance hierarchy, 
where more abstract concepts are at the top and more concrete ideas, 
at the bottom, build upon their abstractions. 
At its most abstract level there is no implementation details at all and perhaps 
very few commonalities, which are added as the abstraction decreases.

As an example, at the top might be an interface 
with a single method, then the next level, provides several abstract classes, 
which may or may not fill in some of the details about the top level, 
but branches by adding their own abstract methods, 
then for each of these abstract classes are concrete classes providing 
implementations of all the remaining methods.



Abstraction - Saramsam (Tamil meaning)
Ex:
interface List in the standard library is an abstraction for a sequence of items, indexed by their position, concrete examples of a List are an ArrayList or a LinkedList. Code that interacts with a List abstracts over the detail of which kind of a list it is using.


Showing only essential features of the object

Abstraction is the concept of describing something in simpler terms, i.e abstracting away the details, in order to focus on what is important

Best example we can give is Soldres and Weapons

ex:
IWeapon  (Attack is a very abstract level functionality of all kind of weapons)
	<- Bow
	<- Gun (Load Bullets is abstract level functionaly of all kind of guns)
		<-MachineGun and Normal Gun 


Soldire.DoAttack(IWeapon objWeapon) {objWeapon.attack() }
//In above example doattack method will take apstract level object and call attack(). it doesn't know about implementation. It can be gun or bow..etc.,


# but what we achieve here? the abstract ideas
	here Doattack will not hav multiple implementations based on weapon. also changing weapon and creating new weapo is very easy and pass as paramater without changing implementation

Implementation doesnot having more knowledge about concerete classes i.e concrete weapons

purpose of an abstract class is to define a common protocol for a set of concrete subclasses. This is useful when defining objects that share code, abstract ideas

This makes for more maintainable code and makes for the sub-classes to each have the same protocol making using and developing new sub-classes easier.














Encapsulation is a technique. It may or may not be for aiding in abstraction, but it is certainly about information hiding and/or organisation. It demands data and functions be grouped in some way - of course good OOP practice demands that they should be grouped by abstraction. However, there are other uses which just aid in maintainability etc.