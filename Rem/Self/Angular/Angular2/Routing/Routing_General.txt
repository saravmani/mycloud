keywords
----------------
router-outlet,routerLink attribute

Routing is useful as the complexity of a project increases because it allows the structure of an
application to be defined separately from the components and directives, meaning that changes to
the structure can be made in the routing configuration and do not have to be applied to the individual
components.

Routing uses the browser’s URL to manage the content displayed to the user.

> Alternative for routing is dynamic components, switch cases. but those are complex if application grows
. so routing is better

html5-history-api package
-----------------------------
The Angular routing features depend on the JavaScript History API, which is not supported by older
browsers, so I have added the html5-history-api package to the application to provide a
polyfill for the missing API.


RouterModule.forRoot method. The forRoot method
produces a module that includes the routing service.

import { Routes, RouterModule } from "@angular/router";
const routes: Routes = [{ path: "form/edit", component: FormComponent }]
export const routing = RouterModule.forRoot(routes);

Routes properties
---------------------

resolve - This property is used to define work that must be completed before a route can
        be activated,
canActivate - This property is used to control when a route can be activated,
canActivateChild
canDeactivate - This property is used to control when a route can be deactivated so that a new
route can be activated.
redirectTo - This property is used to create a route that redirects the browser to a different
URL when activated.
pathMatch - This property tells Angular how to match the current URL to the path property.
There are two allowed values: full, which requires the path value to completely
match the URL, and prefix, which allows the path value to match the URL,
even if the URL contains additional segments that are not part of the path value.
This property is required when using the redirectTo property,


If you find that your routing configuration doesn’t result in the behaviour you expect, then the order in
which the routes have been defined is the first thing to check

The order in which routes are defined is significant. Angular compares the URL to which the browser
has navigated with the path property of each route in turn until it finds a match. This means that the
most specific routes should be defined first

routeLink attribute
-------------------------
This directive can be applied to any element, although it is
typically applied to button and anchor elements
ex: <button routeLink="/product/newproduct" (click)="somefunctionCall()"></button>

The routing system takes into account the base element in the index.html file
when it matches the URL to a route.

The routerLink directive sets the URL using a JavaScript API that tells the browser that this is a
change relative to the current document and
not a change that requires an HTTP request to the server

If you enter a URL that matches the routing system into the browser window,
Rather than handling the change within the Angular application, the browser sends an HTTP request to
the server, which reloads the application



Routing system supports a special path, denoted by two asterisks (the ** characters), that allows
routes to match any URL.

{ path: "**", component: NotFoundComponent }
