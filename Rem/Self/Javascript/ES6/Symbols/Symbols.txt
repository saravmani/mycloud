Symbol
=======================================
It used to generate unique identifier or unique SYMBOL.
even developers doesn't know what is the identifier

var evntSymbol = Symbol("some strign");//Symbol is constructor for symbol
console.log(typeof evntSymbol);// "symbol"
evntSymbol.toString();// "Symbol(some strign)"

there is no way to access the unique id

const evntSymbol = Symbol("some strign");

let first = Symbol("somestring");
let second = Symbol("somestring");
console.log(first===second);//false

Symbol.for
------------------
var eee = Symbol.for("somestring");
 //this will create new symbol
 var eee1 = Symbol.for("somestring");
 //this will give existing symbol
 console.log(eee==eee1);//true

Symbol.keyFor
------------------------
 Symbol.keyFor(eee1) ;//this gives out put in human readable formate
//"somestring"

Example use of symbol
--------------------------
let article={
        title:'WhitefaceMountain',
        [Symbol.for('article')]:'MyArticle'
    };
let value=article[Symbol.for('article')];
console.log(value);
//'MyArticle'

Object.getOwnPropertySymbols(article);
//Symbol(article)



Symbols can be used as a unique value. (# like enumerator in c# we can use it)
----------------------------------------
Let’s assume you have a logging library, which includes multiple log levels such as logger.levels.DEBUG,
logger.levels.INFO, logger.levels.WARN and so on. In ES5 code you’d like make these strings
(so logger.levels.DEBUG === 'debug'), or numbers (logger.levels.DEBUG === 10).
Both of these aren’t ideal as those values aren’t unique values,
but Symbols are! So logger.levels simply becomes:

log.levels = {
  DEBUG: Symbol('debug'),
  INFO: Symbol('info'),
  WARN: Symbol('warn'),
};
log(log.levels.DEBUG, 'debug message');
log(log.levels.INFO, 'info message');


A method definition can also have a computed key:

const FOO = Symbol();
const obj = {
    [FOO]() {
        return 'bar';
    }
};
console.log(obj[FOO]()); // bar
