The role of a view engine is to translate requests for views into ViewEngineResult objects.

IView,IviewEngine, ViewEngineResult

public class ViewEngineResult
{
    public ViewEngineResult(IEnumerable<string> searchedLocations)
    {
        if (searchedLocations == null)
        {
            throw new ArgumentNullException("searchedLocations");
        }
        SearchedLocations = searchedLocations;
    }
    public ViewEngineResult(IView view, IViewEngine viewEngine)
    {
        if (view == null) { throw new ArgumentNullException("view"); }
        if (viewEngine == null) { throw new ArgumentNullException("viewEngine"); }
        View = view;
        ViewEngine = viewEngine;
    }




Implement the IViewEngine and IView interfaces

public interface IViewEngine
{
    ViewEngineResult FindPartialView(ControllerContext controllerContext,
    string partialViewName, bool useCache);
    ViewEngineResult FindView(ControllerContext controllerContext,string viewName, string masterName, bool useCache);
    void ReleaseView(ControllerContext controllerContext, IView view);
}

namespace System.Web.Mvc
{
    public interface IView
    {
        void Render(ViewContext viewContext, TextWriter writer);
    }
}

An IView implementation is passed to the constructor of a ViewEngineResult object, which is then returned from
the view engine methods

The MVC Framework then calls the Render method. The ViewContext parameter provides
information about the request from the client and the output from the action method. The TextWriter parameter is
for writing output to the client.



ReleaseView, is called when a view is no longer needed

You will not have automatic
access to the view engines feature if you have implemented your own action invoker or controller factory directly from
the IActionInvoker or IControllerFactory interfaces.


 

public class DebugDataView : IView
{
    public void Render(ViewContext viewContext, TextWriter writer)
    {
        foreach (string key in viewContext.RouteData.Values.Keys)
        {
            Write(writer, "Key: {0}, Value: {1}", key, viewContext.RouteData.Values[key]);
        }
        foreach (string key in viewContext.ViewData.Keys)
        {
            Write(writer, "Key: {0}, Value: {1}", key,viewContext.ViewData[key]);
        }
    }
    private void Write(TextWriter writer, string template, params object[] values)
    {
        writer.Write(string.Format(template, values) + "<p/>");
    }}}



public class DebugDataViewEngine : IViewEngine
{
    public ViewEngineResult FindView(ControllerContext controllerContext, string viewName, string masterName, bool useCache)
    {
        if (viewName == "DebugData")
        {
            //#NOTE THIS PLACE.. WE ARE CREATING NEW ViewEngineResult OBJECT AND PASSING
            //IView's custome implementation to that
            return new ViewEngineResult(new DebugDataView(), this);
        }
        else
        {
            return new ViewEngineResult(new string[]{ "No view (Debug Data View Engine)" });
        }
    }
    public ViewEngineResult FindPartialView(ControllerContext controllerContext,string partialViewName, bool useCache)
    {
        return new ViewEngineResult(new string[] { "No view (Debug Data View Engine)" });
    }
    public void ReleaseView(ControllerContext controllerContext, IView view) { }     
}


//#NOTE.. WE ARE CREATING NEW ViewEngineResult OBJECT AND PASSING
//IView's custome implementation to that


Register view enigne
-------------------------
protected void Application_Start()
{
    //ViewEngines.Engines.Clear();//To clear all other view engines
    //ViewEngines.Engines.Insert(0,new DebugDataViewEngine());//this to insert our view engine first. 
    //If you want your view to take precedence, then you can insert it at the start of the collection,
    ViewEngines.Engines.Add(new DebugDataViewEngine());
}

The static ViewEngine.Engines collection contains the set of view engines that are installed in the application.
The MVC Framework supports the idea of there being several engines installed in a single application
When a ViewResult is being processed, the action invoker obtains the set of installed view engines and calls their FindView
methods in turn.