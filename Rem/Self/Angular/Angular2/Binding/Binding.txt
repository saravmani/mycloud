
We can’t have two structural directives, directives starting with a *, attached to the same element.
The below code would not work:
<ul *ngFor="let person of people" *ngIf="person.age < 30">
  <li>{{ person.name }}</li>
</ul>

ngFor, ngIf directives are availbale inside browser module and in commonModule also it is available.



This is exactly the same as Angular 1’s ng-if directive however Angular doesn’t have a
built-in alternative for ng-show. To achieve something similar you can bind to the [hidden]
property or use the NgStyle or NgClass directives we cover later in this section.


Internally ng2 converts interpolations {{}} into property binding (while compiling the template code)

<img src="{{imgURL}}" />
<img [src]="imgURL" />

so normally we can go with interpolation for display text
and property binding for other puropse

class binding
-------------------
<div [boolProperty]="className" />

two way binding
------------------
<input type='text' [(ngModel)]="firstName" />


The asterisk is "syntactic sugar". It simplifies ngIf and ngFor for both the writer and the reader.
Under the hood, Angular replaces the asterisk version with a more verbose <template> form.

<!-- Examples (A) and (B) are the same -->
<!-- (A) *ngIf paragraph -->
<p *ngIf="condition">
  Our heroes are true!
</p>

<!-- (B) [ngIf] with template -->
<template [ngIf]="condition">
  <p>
    Our heroes are true!
  </p>
</template>



<my-component *ngFor="#item of items">
</my-component>



*ngIf
---------
ngIf will remove the element instead of hiding. Angular removes the element from DOM,

When we hide an element, the component's behavior continues.
It remains attached to its DOM element. It continues to listen to events.
Angular keeps checking for changes that could affect data bindings.
Whatever the component was doing it keeps doing.
Although invisible, the component � and all of its descendent components � tie
up resources that might be more useful elsewhere.
The performance and memory burden can be substantial and the user may not benefit at all.
On the positive side, showing the element again is very quick.
The component's previous state is preserved and ready to display


ngSwitch,*ngSwitchCase
---------------------------
<div [ngSwitch]="type">
      <cmp1 *ngSwitchCase="'cmp1'"></cmp1>
      <cmp10 *ngSwitchCase="cmp4"></cmp4>
      <div *ngSwitchDefault>text</div>
</div>

Class binding
-----------------
[ngClass]="{'label label-success':boolVal}"
[class.label-success]="boolVal"
[ngStyle]="{'display':consumerDisplayStyle}">

 <i [ngClass]="getIconClass(DriveFileItem.mimeType)"></i>
 getIconClass(mimeType) {
    switch (mimeType) {
      case "text/plain":
        return 'ti-align-justify';
      case "application/vnd.google-apps.folder":
        return 'ti-folder';
    }
 }

Elvis operator (nullable properties)
-------------------------------------------
{{objectName?.peropertyObject?.someValue}}
above expression will not throw any error if objectName is null




Event binding and adding attribute
---------------------------------------
GenerateClick(elementObject: Element){
	var objElementRef = new ElementRef(elementObject);
	this.objRenderer.setElementAttribute(objElementRef.nativeElement.target, "disabled", "disabled");
	this.onGenerate.emit(this.subjectInfo);
}


Binding custome attributes in template
-----------------------------------------
have to add custome attribute like below. this will be converted by angular 2
attr.customeattributename="{{valueee}}"
or
[attr.customeattributename] = "valueee"

Ex:
<option *ngFor="let eachProductDetail of consumerFormControlValues?.consumerProductList"
 attr.productBaseId="{{eachProductDetail.BaseProductId}}" value="{{eachProductDetail.Code}}">{{eachProductDetail.DisplayText}}</option>

<div *ngFor="let eachChunk of objopenAccountChunk;let i = index" id='blockidx{{i}}' class="scrollSpyCls"
[attr.block-Index]="i">



View Encapsulation
-------------------------

@Component({
  selector: 'rpt-cons-comprehensiv-index',
  templateUrl: './rpt-cons-comprehensiv-index.component.html',

 styles:[".HideOnSummeryView {display:none;}"],

encapsulation: ViewEncapsulation.None
 // None, Emulated, Native
})

Emulated (default) - styles from main HTML propagate to the component. Styles defined in this component's @Component decorator are scoped to this component only.
Native - styles from main HTML do not propagate to the component. Styles defined in this component's @Component decorator are scoped to this component only.
None - styles from the component propagate back to the main HTML and therefore are visible to all components on the page. Be careful with apps that have None and Native components in the application. All components with None encapsulation will have their styles duplicated in all components with Native encapsulation.




bind template repeatedly
------------------------------
<template #template>
   foo
 </template>
<header>
  <ng-container *ngTemplateOutlet="template"></ng-container>
</header>
<div>
  <ng-container *ngTemplateOutlet="template"></ng-container>
</div>


//above code will repeat the template two times

ng-template
-----------
<ng-template> is Angular's own implementation of the <template> tag,



combo box or drop down
----------------------------
  <select class="form-control" name="pageSize"
                         [(ngModel)]="table.pageSize">
                         <option [ngValue]="5">5</option>
                         <option [ngValue]="10">10</option>
                         <option [ngValue]="15">15</option>
                     </select>

ngNonBindable
--------------------
We use ngNonBindable when we want tell Angular not to compile or bind a particular section of
our page.

ex:
<span class="pre" ngNonBindable>
10 &larr; This is what {{ content }} rendered
11 </span>


ng-content
----------
used for container. it will not generate any aditional tag
<ng-container></ng-content> this used to get the data from parent contontrol like below
parent-component.ts
<child-component>some content needs to go inside of ng-content tag </child-component>


ng-container vs template
------------------------
Both of them are at the moment (2.x, 4.x) used to group elements together without
having to introduce another element which will be rendered on the page (such as div or span).

template, however, requires nasty syntax. For example,

<li *ngFor="let item of items; let i = index; trackBy: trackByFn">...</li>
would become

<template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
  <li>...</li>
</template>
You can use ng-container instead since it follow the nice * syntax
 which you expect and are probably already familiar with.

<ng-container *ngFor="let item of items; let i = index; trackBy: trackByFn">
  <li>...</li>
</ng-container>
