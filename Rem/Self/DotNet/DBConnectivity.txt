Oracle
-------
Oracle ODP.NET, Managed Driver 12.1.24160719
	ODP.NET, Managed Driver is a 100% native .NET code driver. No additional Oracle Client software is required to be installed to connect to Oracle Database.

Check the link
	https://www.nuget.org/packages/Oracle.ManagedDataAccess/12.1.24160719


Connection pool
---------------------
After OracleConnection.Close() the real database connection does not terminate.
 The connection object is put back in connection pool. The use of connection pool is implicit by ODP.NET. 
If you create a new connection you get one of the pool. 
If this connection is "yet open" the OracleConnection.Open() method does not really 
creates a new connection.

on first request to database, it serves the database call. Once it is done and when client application requests for closing the connection, ADO.NET does not destroy the complete connection rather it creates a connection pool and puts the released connection object in the pool and holds the reference to it. And next time when the request to execute any query/stored proc comes up, it bypasses the hefty process of establishing the connection and just picks up the connection from the connection pool and uses that for this database call.

ado.net tries to fetch the usable connection from that pool. If no usable free connection is found in the pool, new connection is created and added to the pool


 At times, connections are not closed/disposed explicitly, these connections do not go to the pool immediately. 


ADO.NET 2.0 introduces two new methods to clear the pool: ClearAllPools and ClearPool. ClearAllPools clears the connection pools for a given provider, and ClearPool clears the connection pool that is associated with a specific connection. If there are connections in use at the time of the call, they are marked appropriately. When they are closed, they are discarded instead of being returned to the pool.

integerated security
--------------------------
If you are using Integrated Security, then the connection pool is created for each user accessing the client system, whereas, when you use user id and password in the connection string, single connection pool is maintained across for the application. In the later case, each user can use the connections of the pool created and then released to the pool by other users. Thus using user id and password is recommended for better end user performance experience.