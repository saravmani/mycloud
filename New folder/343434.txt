
---------- Forwarded message ----------
From: sirisha p <psirisha1592@gmail.com>
Date: Thu, Feb 15, 2018 at 8:22 AM
Subject: create-project.po.ts
To: winners.mani@gmail.com


import { DebugElement } from '@angular/core';
import { FormGroup, FormControl, AbstractControl } from '@angular/forms';
import { By } from '@angular/platform-browser';
import { ComponentFixture } from '@angular/core/testing';

import { click, input, select, submit } from '../../lib/kpmgBteCore/testing';
import { TypeaheadDirective } from '../../lib/kpmgBteUiToolkit';

import { Client, Project, Lookup, ProjectType, Rule5253, RuleType5253 } from '../../lib/kpmgBteEntities';
import { CreateProjectComponent } from './create-project.component';
import { createClients, createProjects, createProjectTypes, createRuleData } from '../shared/testing';


export class Page {
    // Form Element
    formElem: HTMLFormElement;
    // Form Groups
    projSetupFormGroup: FormGroup;   
    // Form Controls
    clientCtrl: AbstractControl;
    projectCtrl: AbstractControl;
    taxYearCtrl: AbstractControl;
    projTypeCtrl: AbstractControl;
    projNameCtrl: AbstractControl;
    oppIdCtrl: AbstractControl;
    engNumberCtrl: AbstractControl;
    periodCtrl: AbstractControl;
    ruleCtrl: AbstractControl;
    shortYearCtrl:AbstractControl;
    beginDateCtrl: AbstractControl;
    endDateCtrl: AbstractControl;

    // Form HTML Elements
    clientInput: HTMLInputElement;
    engIdLabel: HTMLLabelElement;
    taxYearSelector: HTMLSelectElement;
    projTypeSelector: HTMLSelectElement;
    projNameInput: HTMLInputElement;
    oppIdInput: HTMLInputElement;
    engNumberInput: HTMLInputElement;
    beginDateSelector: HTMLSelectElement;
    endDateSelector: HTMLSelectElement;
    periodSelector: HTMLSelectElement;
    saveProjBtn: HTMLButtonElement;

    // Error messages
    initError: DebugElement;
    clientReqError: DebugElement;
    taxYearInvalidIdError: DebugElement;
    taxYearReqError: DebugElement;
    projTypeInvalidIdError: DebugElement;
    projNameReqError: DebugElement;
    projNameMaxLenError: DebugElement;
    oppIdMaxLenError: DebugElement;
    engNumberMaxLenError: DebugElement;
    beginDateReqError: DebugElement;
    endDateReqError: DebugElement;
    periodInvalidIdError: DebugElement;
    projTypeReqError: DebugElement;

    constructor(private _component: CreateProjectComponent,
        private _fixture: ComponentFixture<CreateProjectComponent>) {
    }

    addPageElements(): void {
        this.projSetupFormGroup = this._component.projSetupForm;
        this.clientCtrl = this._component.projSetupForm.controls['client'];
        this.taxYearCtrl = this._component.projSetupForm.controls['taxYear'];
        this.projTypeCtrl = this._component.projSetupForm.controls['projectType'];
        this.projNameCtrl = this._component.projSetupForm.controls['projectName'];
        this.oppIdCtrl = this._component.projSetupForm.controls['opportunityId'];
        this.engNumberCtrl = this._component.projSetupForm.controls['engagementNumber'];
        this.periodCtrl = this._component.projSetupForm.controls['period'];
        this.beginDateCtrl = this._component.projSetupForm.controls['beginDate'];
        this.endDateCtrl = this._component.projSetupForm.controls['endDate'];
       
        this.formElem = this._fixture.debugElement.query(By.css('form')).nativeElement;
        this.clientInput = this._fixture.debugElement.query(By.css('#txtClient')).nativeElement;
        this.taxYearSelector = this._fixture.debugElement.query(By.css('#ddTaxYears')).nativeElement;
        this.projTypeSelector = this._fixture.debugElement.query(By.css('#ddProjTypes')).nativeElement;
        this.projNameInput = this._fixture.debugElement.query(By.css('#ddProjName')).nativeElement;
        this.oppIdInput = this._fixture.debugElement.query(By.css('#txtOppId')).nativeElement;
        this.engNumberInput = this._fixture.debugElement.query(By.css('#txtEngNbr')).nativeElement;
        this.saveProjBtn = this._fixture.debugElement.query(By.css('#btnSaveProj')).nativeElement;
        this.beginDateSelector = this._fixture.debugElement.query(By.css('#dtTaxYearBegin')).nativeElement;
        this.endDateSelector = this._fixture.debugElement.query(By.css('#dtTaxYearEnd')).nativeElement;
        this.periodSelector = this._fixture.debugElement.query(By.css('#Period')).nativeElement;

        this._fixture.detectChanges();
    }

    addErrorElements(): void {
        this.initError = this._fixture.debugElement.query(By.css('#initError'));
        this.clientReqError = this._fixture.debugElement.query(By.css('#clientReqError'));
        this.taxYearInvalidIdError = this._fixture.debugElement.query(By.css('#taxYearInvalidIdError'));
        this.projTypeInvalidIdError = this._fixture.debugElement.query(By.css('#projTypeInvalidIdError'));
        this.projNameReqError = this._fixture.debugElement.query(By.css('#projNameReqError'));
        this.projNameMaxLenError = this._fixture.debugElement.query(By.css('#engNameMaxLenError'));
        this.oppIdMaxLenError = this._fixture.debugElement.query(By.css('#oppIdMaxLenError'));
        this.engNumberMaxLenError = this._fixture.debugElement.query(By.css('#engNumberMaxLenError'));
        this.beginDateReqError = this._fixture.debugElement.query(By.css('#beginDateReqError'));
        this.endDateReqError = this._fixture.debugElement.query(By.css('#endDateReqError'));
        this.periodInvalidIdError = this._fixture.debugElement.query(By.css('#periodInvalidIdError'));
   
        this._fixture.detectChanges();
    }

    setClientSearchTerm(searchTerm: string): void {
        this.clientInput.value = searchTerm;
        input(this.clientInput);
        this._fixture.detectChanges();
    }

    getClientSearchResults(): DebugElement[] {
        return Array.from(this._fixture.debugElement.queryAll(By.css('#txtClient')));
    }

    dismissClientSearchResults(): void {
        // Simulate "ESC" key
        const escKey = 27;
        const event = { which: escKey, preventDefault: () => { }, stopPropagation: () => { } };
        const typeahead = this._fixture.debugElement.query(By.directive(TypeaheadDirective));
        typeahead.triggerEventHandler('keydown', event);
        this._fixture.detectChanges();
    }

    selectClientSearchResult(index: number): void {
        const results = this.getClientSearchResults();
        click(results[index].nativeElement);
        this._fixture.detectChanges();
    }

    setTaxYear(id: number): void {
        this.taxYearCtrl.setValue(id);
        select(this.taxYearSelector);
        this._fixture.detectChanges();
    }

    setProjectType(id:number): void {
        this.projTypeCtrl.setValue(id);
        select(this.projTypeSelector);
        this._fixture.detectChanges();
    }

    setPeriod(id: number): void {
        this.periodCtrl.setValue(id);
        select(this.periodSelector);
        this._fixture.detectChanges();
    }

    setBeginDate(id:number): void {
        this.beginDateCtrl.setValue(id);
        select(this.beginDateSelector);
        this._fixture.detectChanges();
    }

    setEndDate(id: number): void {
        this.endDateCtrl.setValue(id);
        select(this.endDateSelector);
        this._fixture.detectChanges();
    }
    setProjectName(name: string): void {
        this.projNameCtrl.setValue(name);
        input(this.projNameInput);
        this._fixture.detectChanges();
    }

    setOpportunityId(oppId: string): void {
        this.oppIdCtrl.setValue(oppId);
        input(this.oppIdInput);
        this._fixture.detectChanges();
    }

    setEngagementNumber(engNum: string): void {
        this.engNumberCtrl.setValue(engNum);
        input(this.engNumberInput);
        this._fixture.detectChanges();
    }

    saveProject(): void {
        submit(this.formElem);
        this._fixture.detectChanges();
    }

}

Thanks and Regards

Sirisha Pogaku
937-815-8081




-- 


By,
N.SaravanaManikandan