changes propagate through the application so that filling in a form field or 
clicking a button causes immediate updates to the
application state. But there are limitations to the changes that Angular can detect.

Reactive Extensions library provides an asynchronous event
distribution mechanism that is used 
extensively INSIDE Angular for change detection and event propagation.

Is ther alternative to RxJS?
    RxJS is required to access some Angular features, such as updates to child
and view children queries and making asynchronous HTTP requests.

Why we need to use RxJS? Bcs Angular already doing change detection processes.
And that presents a problem, because Angular manages the bindings for the HTML elements 
automatically,
but it doesn’t provide any support for responding to service changes within the component itself.

The problem with this code is that the ngDoCheck method will be called whenever Angular detects any
kind of change in the application. It doesn’t matter what happens or where it happens: Angular is going to
have to call the ngDoCheck method to give the component a chance to update itself. You can minimize the
amount of work that is done in the ngDoCheck method, but as the number of directives and components in
the application increases, the number of change events and the number of calls to the ngDoCheck method
will increase, which can drag down the performance of the application.

# my understanding is, we can disable change detection process for all the child components.
and let the child componetns to subscribe the observerable collection. whenever changes related to one 
component happens then we can inform to another component through observerable and 
let that component do the detech changes for one time.