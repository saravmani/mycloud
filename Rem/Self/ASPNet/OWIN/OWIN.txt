Ref: https://coding.abel.nu/2014/05/whats-this-owin-stuff-about/
break up the tight coupling between ASP.NET and IIS.
With IIS supporting Owin it is possible to run other Owin-enabled frameworks such as Nancy on IIS.
With Microsoft’s web frameworks depending on Owin and not IIS it is possible to run those in other environments,
such as self hosting within a process or on a web server on linux running Mono. SignalR and Web API already uses Owin which means that they can be self hosted
and other cool stuff. ASP.NET MVC6 which is part of ASP.NET vNext will be completely based on Owin.

Owin
----------------
 (OWIN) defines an abstraction between .NET web servers and web applications. By decoupling the web server from the application,
  OWIN makes it easier to create middleware for .NET web development. Also, OWIN makes it easier to port web applications to other hosts
 Owin.dll  - are community owned and community run open source

   Katana
   -------------
 Microsoft’s framework (Microsoft.Owin.* namespace) is called Katana and
 is open sourced on codeplex.
  Katana contains a set of standard middleware for things like
  authentication, static file serving, logging .
  The Katana project is a set of open-source OWIN components developed by Microsoft.

Whereas both the OWIN specification and Owin.dll are community owned and community run open source efforts, the Katana project represents the set of OWIN components that, while still open source, are built and released by Microsoft. These components include both infrastructure components, such as hosts and servers, as well as functional components, such as authentication components and bindings to frameworks such as SignalR and ASP.NET Web API.



Microsoft.Owin.Host.SystemWeb - Owin server  which used to run Owin based applications on IIS server
#so we need to have this package (nuget), to run any owin based applications ex: signalR, ASP.NET Identity


Problem in system.web.dll
------------------------------
Firstly, the framework was monolithic, with logically disparate units of functionality being tightly coupled in the same System.Web.dll assembly
 (for example, the core HTTP objects with the Web forms framework). Secondly, ASP.NET was included as a part of the larger .NET Framework,
 which meant that the time between releases was on the order of years. This made it difficult for ASP.NET to keep pace with all of the changes happening in rapidly evolving Web development.
 Finally, System.Web.dll itself was coupled in a few different ways to a specific Web hosting option: Internet Information Services (IIS).

 The need of pluggable web components rather then full featured single framework
 ---------------------------------------------------------------------------

 nd lots of change was happening in Web development! Web applications were increasingly being developed as a series of small, focused components rather than large frameworks. The number of components as well as the frequency with which they were released was increasing at an ever faster rate. It was clear that keeping pace with the Web would require frameworks to get smaller, decoupled and more focused rather than larger and more feature-rich, therefore the ASP.NET team took several evolutionary steps to enable ASP.NET as a family of pluggable Web components rather than a single framework.

 The engineering team took advantage of the opportunity and built ASP.NET Web API such that it had no dependencies on any of the core framework types found in System.Web.dll. This enabled two things: first, it meant that ASP.NET Web API could evolve in a completely self-contained manner (and it could continue to iterate quickly because it is delivered via NuGet). Second, because there were no external dependencies to System.Web.dll, and therefore, no dependencies to IIS, ASP.NET Web API included the capability to run in a custom host (for example, a console application, Windows service, etc.)


The Katana component architecture divides an application into four logical layers, as depicted below:
 Application<<--Middleware<<--Server<<--Host

  implementations of these layers can be easily substituted, in many cases, without requiring recompilation of the application.


  Node Js and Katana
  --------------------------
  When it was first introduced, one aspect of the Node.js
  framework that immediately drew people's attention was the simplicity
  with which one could author and run a Web server.
  If Katana goals were framed in light of Node.js, one might summarize
  them by saying that Katana brings many of the benefits of Node.js
  (and frameworks like it) without forcing the developer to throw out
  everything she knows about developing ASP.NET Web applications.
  For this statement to hold true, getting started with the Katana project
  should be equally simple in nature to Node.js.

HTTPModules and Middler ware concept
--------------------------------------------
HttpModules helps me to attach my code specific to a application events. Owin middleware is independent of these events
OWIN applications inside another .NET application if you so desire.
  so owin middlewares we can able to reuse



  AppBuilderExtensions has the method "CreatePerOwinContext<T>" that registers a callback that will be invoked to create an instance of type T and it will be stored in the OwinContext. Later on we can retrieve it using the context.Get method.
