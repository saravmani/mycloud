
Clustering
--------------
use multiple cores for a single application, the cluster API was
added to Node. This API makes it easy for your application to simultaneously run multiple
“workers” on different cores that each do the same thing and respond to the
same TCP/IP port.
var cluster = require('cluster');
var http = require('http');
var numCPUs = require('os').cpus().length;
if (cluster.isMaster) {
for (var i = 0; i < numCPUs; i++) {
cluster.fork();
}
cluster.on('exit', function(worker, code, signal) {
console.log('Worker ' + worker.process.pid + ' died.');
});
} else {
http.Server(function(req, res) {
res.writeHead(200);
res.end('I am a worker running in process ' + process.pid);
}).listen(8000);
}


Because masters and workers run in separate operating system processes, which is necessary
if they’re to run on separate cores, they can’t share state through global variables.
But the cluster API does provide a means for the master and workers to
communicate.

Ex: of messaging
var cluster = require('cluster');
var http = require('http');
var numCPUs = require('os').cpus().length;
var workers = {};
var requests = 0;
if (cluster.isMaster) {
for (var i = 0; i < numCPUs; i++) {
workers[i] = cluster.fork();
(function (i) {
workers[i].on('message', function(message) {
if (message.cmd == 'incrementRequestTotal') {
requests++;
for (var j = 0; j < numCPUs; j++) {
workers[j].send({
cmd: 'updateOfRequestTotal',
requests: requests
});
}
}
});
})(i);
}
cluster.on('exit', function(worker, code, signal) {
console.log('Worker ' + worker.process.pid + ' died.');
});
} else {
process.on('message', function(message) {
if (message.cmd == 'updateOfRequestTotal') {
requests = message.requests;
}
});
http.Server(function(req, res) {
res.writeHead(200);
res.end('Worker in process ' + process.pid
+ ' says cluster has responded to ' + requests
+ ' requests.');
process.send({cmd: 'incrementRequestTotal'});
}).listen(8000);
}