
Defination
---------------------
The Template Method Pattern defines the skeleton
of an algorithm in a method, deferring some steps to
subclasses. Template Method lets subclasses redefi ne
certain steps of an algorithm without changing the
algorithm’s structure.


The Factory Method is a
specialization of Template
Method.


#My Defination: Template method provides skeleton of algorithm and one or more more steps can be provided by sub classes


# Creating generic template method  which contains alogorithm

In the template, each step of
the algorithm is represented
by a method.

The Template Method defines the steps of an algorithm and allows
subclasses to provide the implementation for one or more steps



public abstract class CaffeineBeverage
{
    final void prepareRecipe()//This is the template methd. Using this we can able to implement tea ,cofee etc
    {
        boilWater();
        brew();
        pourInCup();
        addCondiments();
    }
    abstract void brew();
    abstract void addCondiments();
    void boilWater()
    {
        System.out.println(“Boiling water”);
    }
    void pourInCup()
    {
        System.out.println(“Pouring into cup”);
    }
}



public class Tea extends CaffeineBeverage
{
public void brew()
{
    System.out.println(“Steeping the tea”);
}
public void addCondiments()
{
    System.out.println(“Adding Lemon”);
}
}
public class Coffee extends CaffeineBeverage
{
public void brew()
{
    System.out.println(“Dripping Coffee through filter”);
}
public void addCondiments()
{
    System.out.println(“Adding Sugar and Milk”);
}
}



The prepareRecipe()  method controls the algorithm,NO ONE CAN CHANGE THIS, and it
counts on subclasses to provide some or all of the implementation.


Advantages
--------------------
The algorithm lives in one place and
code changes only need to be made
there.

The Template Method version provides
a framework that other caffeine  beverages can be plugged into. New caffeine beverages only need to
implement a couple of methods.

The template method makes use of the
primitiveOperations to implement an algorithm. 
It is DECOUPLES from the actual  implementation of these operations.


Use cases
---------------
1. # I guess in asp.net web forms , page lifecycle having this ???
2. # frame work design. in big project, when multiple teams are working, when i develop a framework then i will use this pattern. 
remember hollywood principle
3. This pattern shows up so often because it’s a great design tool
for creating frameworks, where the framework controls how
something gets done, but leaves you (the person using the
framework) to specify your own details about what is actually
happening at each step of the framework’s algorithm.






This pattern is all about creating a template for an algorithm. What’s a template?
As you’ve seen it’s just a method; more specifi cally, it’s a method that defi nes an
algorithm as a set of steps. One or more of these steps is defi ned to be abstract and
implemented by a subclass. This ensures the algorithm’s structure stays unchanged,
while subclasses provide some part of the implementation.


The ConcreteClass implements
the abstract operations,
which are called when the
templateMethod() needs them.


Hooks
====================================================================================================
abstract class AbstractClass
{
    final void templateMethod()
    {
        primitiveOperation1();
        primitiveOperation2();
        concreteOperation();
        hook();
    }
    abstract void primitiveOperation1();//In c# this methods can be protected. so that subclasses can implement this. but it can only be used by super class. not others
    abstract void primitiveOperation2();
    final void concreteOperation()
    {
        // implementation here
        //It may be used in the template method  directly, or used by subclasses.
    }
    void hook() { }
}

A concrete method, but  it does nothing!


We can also have concrete methods that do nothing
by default; we call these “hooks.” Subclasses are free  to override IF THEY WISH.
subclass is also free to ignore the hook.



public abstract class CaffeineBeverageWithHook
{
    final void prepareRecipe()
    {
        boilWater();
        brew();
        pourInCup();
        if (customerWantsCondiments())//this is the hook
        {
            addCondiments();
        }
    }

    boolean customerWantsCondiments()//this is the hook
    {
        return true;
    }

    abstract void brew();
    abstract void addCondiments();
    void boilWater()
    {
        System.out.println(“Boiling water”);
    }
    void pourInCup()
    {
        System.out.println(“Pouring into cup”);
    }


    Here, the hook controls whether
the CaffeineBeverage evaluates a certain part of the algorithm; that is, whether
it adds a condiment to the beverage.


public class CoffeeWithHook extends CaffeineBeverageWithHook
{
public void brew()
{
    System.out.println(“Dripping Coffee through filter”);
}
public void addCondiments()
{
    System.out.println(“Adding Sugar and Milk”);
}
public boolean customerWantsCondiments()
{
    String answer = getUserInput();
    if (answer.toLowerCase().startsWith(“y”))
    {
        return true;
    }
    else
    {
        return false;
    }
}
private String getUserInput()
{
    String answer = null;
    System.out.print(“Would you like milk and sugar with your coffee(y / n) ? “);
    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
    try
    {
        answer = in.readLine();
    }
    catch (IOException ioe)
    {
        System.err.println(“IO error trying to read your answer”);
    }
    if (answer == null)
    {
        return “no”;
    }
    return answer;
}
}








When I’m creating a template
method, how do I know when to use
abstract methods and when to use
hooks?
A: Use abstract methods when your
subclass MUST provide an implementation
of the method or step in the algorithm.
Use hooks when that part of the algorithm
is optional. With hooks, a subclass may
choose to implement that hook, but it doesn’t
have to.


Uses of Hooks
----------------
hook may provide a way for
1.  a subclass to implement an optional part of algorithm to give the subclass
2.      a chance to react to some step in the template method that is about to happen, or just happened. For instance, a hook
method like justReOrderedList() allows the subclass to perform some activity (such as
redisplaying an onscreen representation) after an internal list is reordered.



It seems like I should keep my
abstract methods small in number,
otherwise it will be a big job to implement
them in the subclass.
A: That’s a good thing to keep in
mind when you write template methods.
Sometimes this can be done by not making
the steps of your algorithm too granular. But
it’s obviously a trade off: the less granularity,
the less flexibility.
Remember, too, that some steps will be
optional; so you can implement these as
hooks rather than abstract methods, easing
the burden on the subclasses of your
abstract class.



hollywood Principle
===================================
With the Hollywood Principle, we allow low-level components
to hook themselves into a system, but the high-level
components determine when they are needed, and how. In
other words, the high-level components give the low-level
components a “don’t call us, we’ll call you” treatment.



The Hollywood Principle and Template Method
----------------------------------------------------
CaffeineBeverage is our high-level
component. It has control over the
algorithm for the recipe, and calls on
the subclasses only when they’re needed
for an implementation of a method

Clients of beverages will depend
on the CaffeineBeverage
abstraction rather than a
concrete Tea or Coffee, which
reduces dependencies in the
overall system

Hooks and hollywood principle
The Hollywood Principle guides
us to put decision-making in
high-level modules that can
decide how and when to call
low level modules.







Note:  many implementations of the template methods that don’t quite look like the
textbook design of the pattern.

#  Case 1 SortedList is a template pattern. here it is having all the logics for listing and sorting. but to compare the object it will ask us. so the objects
which we are going to add in SortedList need to be implemented with IComparable interface.
# we can say this is strategy pattern. but strategy all the logic including storing logic should be implemented by concrete subclass

We know that we should favor composition over inheritance, right? # so i guess SortedList using composition technique to implement template pattern here... i guess :-) 





Look at main method here.. .. main method's class inherted from other.. wwwwwaaavvvvvvvvvvv.... 
i didn see like this before.Bcs it is entry point...:-)

public class MyFrame extends JFrame
{
public MyFrame(String title)
{
    super(title);
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.setSize(300, 300);
    this.setVisible(true);
}
public void paint(Graphics graphics)
{
    super.paint(graphics);
    String msg = “I rule!!”;
    graphics.drawString(msg, 100, 100);
}
public static void main(String[] args)
{
    MyFrame myFrame = new MyFrame(“Head First Design Patterns”);
}
}







Template method and strategy pattern having lots of commonalities
----------------------------------------------------------------------------- 
Template method is to define the outline of an algorithm, but
let   subclasses do some of the work. That
way, It can have different implementations of an algorithm’s individual steps, but keep control
over the algorithm’s structure. 
All  duplicated code gets put into the superclass, so all the subclasses can share it.
Template method It perfect for creating frameworks.

But strategy pattern will not have an controll over the algorithms. # I mean flow of steps
strategy Pattern offer clients a  choice of algorithm implementation through
object composition.
more flexible
Strategy pattern use object composition. clients can change their algorithms at runtime
simply by using a different strategy object.



The Strategy and Template
Method Patterns both
encapsulate algorithms, one
by inheritance and one by
composition.


You’ll see lots of uses of the
Template Method Pattern in
real world code, but don’t
expect it all (like any pattern) to
be designed “by the book.”



