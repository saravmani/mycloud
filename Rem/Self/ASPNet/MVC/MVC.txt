MVC5 filter override is possible at method level or controller level

Areas
-------
Areas are introduced  in MVC 2.


URL routing
----------------
URL routing is very useful to generatet the URLS with sepcific custome defined formate. it is easy to bookmark and remember.
You can also define attribute routing for a controller that belongs to an area by using the RouteArea attribute. When you define attribute routing for all controllers with in an area, you can safely remove the AreaRegistration class for that area.

To enable attribute add below code in routeconfig.cs file
	routes.MapMvcAttributeRoutes();

If we want to add new rout path, then our new configuration should appear first after that only default configuration rout shoud get appear

Ex: Routing
routes.MapRoute(name:"routname",url="ajax/req/{ID}",defaults:new {controller:"ControllerName",action="Actiontoroute"});

MVC5 and webapi2 supports attribute based routing

[Route("Detailskk/{RUID?}")] //ControllerName/Detailskk/44
public ActionResult Details(int RUID)
{
  return View();
}


[RoutePrefix("ControllerName")]
[Route("{action=DefaultAction}")] 
    public class SubjectController : Controller
    {


[Route("Detailskk/{RUID:min(10):max(50):int}")] 
        public ActionResult Details(int RUID)
        {
            return View();
        }

When you combine attribute routing with convention-based routing, actions which do not have Route attribute for defining attribute-based routing will work according to convention-based routing. In above example Contact action will work according to convention-based routing.




REference for Razor helper, functions 
http://www.mikesdotnetting.com/article/173/the-difference-between-helpers-and-functions-in-webmatrix

Model binding
---------------
In MVC model binding happed by value providers. MVC supports different types of value providers
JSON values
form values
query values
Uploaded values
Route values
Render action.
system searches for data from those
value providers in their registered order
Developers can write their own value provider factories and value providers,
and insert them into the factory list contained inside ValueProviderFactories.Factories.
Other value providers
Cookie value provider
‰ Server variable value provider
‰ Session value provider
‰ TempData value provider


Filters
-----------
	Custom filters and attributes are an excellent way of injecting extra processing logic into the MVC request response pipeline.




Test Driven Development is the process where the developer creates the test case first and then fixes the actual implementation of the method. 
It happens this way, first create a test case, fail it, do the implementation, ensure the test case success, re-factor the code and then continue with the cycle again.




Expilisitly trigger validation event
	$('form').valid()

MVC - in layout page we can use RenderSection("SectionName",Required:false).
when the page inherited from this lay out, in that page if we declare section with "SectionName".. this will get displaied in main layout while rendering


To work with ajax helpers we need unobtrusive-ajax js file required

Nuget package manager
--------------------------
2010 does not have nuget by default. we have to install manually.
The Visual Studio Extension Manager installs extensions
that extend and enhance Visual Studio. These extensions
are not deployed as part of your application. In contrast, the purpose of NuGet is to install packages
that are included in and extend your project. In most cases, the contents of these packages are
deployed as part of your application.
The first time any package is
installed into a project, a new fi le named packages
.config is added to the project
But ASP.NET MVC 4 project
since the project template itself includes several NuGet packages.

When the first package is installed into a project, a packages
folder is created in the same directory as the solution file, as



URL rewriting means - mapping one URL to Another URL
URL routing means - finding the resource with differnt notation. URL routing in MVC does not rewrite the URL. It just matches with piece of code.
URL rewriting applies only to incoming requests and does not help in generating the original URL.
Every ASP.NET MVC application needs at least one route to defi ne how the application should
handle requests,

certain special parameter names are required by ASP.NET MVC in
order to function correctly: {controller} and {action}.
Ex: routes.MapRoute("simple", "{controller}/{action}/{id}");





ASP.NET Web API is hostable outside of ASP.NET, which means it can’t use
ASP.NET Routing directly. Instead, it introduces a clone of the Routing code.
But when ASP.NET Web API is hosted on ASP.NET, it mirrors all the Web API
routes into the core ASP.NET Routing’s set of routes.



add below mentioned commeted tag in any js or cshtml file.. so that intelisense will be build on vsts2012 and >
/// <reference path="Search.js" />

validation type and all validation parameter names must be lowercase because their values must be
legal to use as HTML attribute identifi ers


below configuration to enable clident side validation
<appSettings>
<add key="ClientValidationEnabled" value="true"/>
<add key="UnobtrusiveJavaScriptEnabled" value="true"/>
</appSettings>

we can enable or disable this feature at page level. but why disableing required???? bcs if we want to do with our custome code.. we can do this ..hihi


ajax forms
@using (Ajax.BeginForm("ArtistSearch", "Home",
new AjaxOptions {
InsertionMode=InsertionMode.Replace,
HttpMethod="GET",
OnFailure="searchFailed",
LoadingElementId="ajax-loader",
UpdateTargetId="searchresults",
}))
{
<input type="text" name="q" />
<input type="submit" value="search" />
<img id="ajax-loader"
src="@~/Content/Images/ajax-loader.gif"
style="display:none"/>
}

 

to use ajax helpers we have to include jquery.unobtrusive-ajax file .
<div id="dailydeal">
@Ajax.ActionLink("Click here to see today's special!",
"DailyDeal",
new AjaxOptions{
UpdateTargetId="dailydeal",
InsertionMode=InsertionMode.Replace,
HttpMethod="GET"
})
</div>





The fi les with “unobtrusive” in the name are fi les written by Microsoft. The unobtrusive scripts
integrate with jQuery and the MVC framework to provide the unobtrusive JavaScript features.You’ll need to use these fi les if you want to use Ajax features of the ASP.NET MVC
framework.


In VSTS 2012 we no need to refer .js file in all pages to get intelisense.
we have just refer the file in _references.js file. vsts automatically detect and generate intelisance in all the pages

You’ll also fi nd fi les containing vsdoc in the name. These fi les are specially annotated to help Visual
Studio provide better IntelliSense.

The UIHint attribute gives the ASP.NET MVC run time the name of a template to use when rendering
output with the templated helpers (like DisplayFor and EditorFor). You

[Required]
[DataType(DataType.Password)]
[Display(Name="Password")]
public string Password { get; set; }

[ReadOnly(true)]
public decimal Total { get; set; }
Note the EditorForModel helper will still display an enabled input for the property, so only the
model binder respects the ReadOnly attribute.

The ScaffoldColumn attribute hides a property from HTML helpers such as EditorForModel and
DisplayForModel:
[ScaffoldColumn(false)]
public string Username { get; set; }
however, the model binder might still try to move a value into the Username
property if it sees a matching value in the request.

When the model binder is fi nished updating the order, it runs any validation rules associated
with the object, so you’ll know if the object is in a good state or not. 

Check particular field is valid .. after model binding happen
	ModelState.IsValidField("LastName")

Model state contains
	All errors associated with properties
	Values which entered by user

<script src="~/Scripts/jquery-1.6.2.js"></script>
Note that ASP.NET MVC’s Razor view engine will resolve the ~ operator to the root of the current
web site, even when the ~ appears in an src attribute. Also note that specifying the type as text/
javascript isn’t needed in HTML 5.


Remember
-----
model binder, modal validator, modal state, modal metat data
The model binder catches all the failed validation rules and
places them into model state.

Anotation
---------

Custome anotations are usefull bcs we can ableto reuse it

[RegularExpression(@"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}")]
public string Email { get; set; }
[Compare("Email")]
public string EmailConfirm { get; set; }
[Remote("CheckUserName", "Account")]
public string UserName { get; set; }
Anotation with bilingual
[Required(ErrorMessageResourceType=typeof(ErrorMessages),
ErrorMessageResourceName="LastNameRequired")]

The Remote attribute enables you to perform client-side validation with a server callback. Take, for
example, the UserName property of the RegisterModel class in the MVC Music Store. No two users
should have the same UserName value, but it is diffi cult to validate the value on the client to ensure
the value is unique (to do so you would have to send every single username from the database to the
client). With the Remote attribute you can send the UserName value to the server, and compare the
value against the values in the database.
[Remote("CheckUserName", "Account")]
public string UserName { get; set; }
Inside the attribute you can set the name of the action, and the name of the controller the client code
should call. The client code will send the value the user entered for the UserName property automatically,
and an overload of the attribute constructor allows you to specify additional fi elds to send to
the server.
public JsonResult CheckUserName(string username)
{
var result = Membership.FindUsersByName(username).Count == 0;
return Json(result, JsonRequestBehavior.AllowGet);
}


[Required(ErrorMessage="Your {0} is required.")]
[StringLength(160, ErrorMessage="{0} is too long.")]
public string LastName { get; set; }



MVC framework executes validation logic during model binding.model binder runs implicitly when you have parameters to an action










The RenderPartial helper is similar to Partial, but RenderPartial writes directly to the response
output stream instead of returning a string. For this reason, you must place RenderPartial inside
a code block instead of a code expression. To illustrate, the following two lines of code render the
same output to the output stream:
@{Html.RenderPartial("AlbumDisplay "); }
@Html.Partial("AlbumDisplay ")
So, which should you use, Partial or RenderPartial? In general, you should prefer Partial to
RenderPartial because Partial is more convenient (you don’t have to wrap the call in a code
block with curly braces). However, RenderPartial may result in better performance because it
writes directly to the response stream, although it would require a lot of use (either high site traffi c
or repeated calls in a loop) before the difference would be noticeable.



In ASP.NET MVC 4, which uses Razor version 2, the tilde character is resolved automatically when
it appears in the src attribute for script, style, and img elements.

@Url.Content("~/Scripts/jquery-1.5.1.min.js")
this converts relative path to actual path


The Action URL helper is exactly like ActionLink, but does not return an anchor tag.

If we use strongly typed model in views, if we change the
name of a property in your model, Visual Studio can automatically change the code in the view).

If we use helper classes,it first looks data from view bag, then it will check data from strongly typed mode.

<label for="GenreId">Genre</label>
	// "For" key word used to set focus to revelan controll which is having id as "GenereId"


Dashes are not
valid in C# property names, but all HTML helpers convert an underscore in a property name to a
dash when rendering the HTML. The following view code:
@using (Html.BeginForm("Search", "Home", FormMethod.Get,
new { target = "_blank", @class="editForm", data_validatable=true }))

class is a reserved keyword in C# and is not available to use as a property name
or identifi er, so you must prefi x the word with an @ sign:
@using (Html.BeginForm("Search", "Home", FormMethod.Get,
new { target = "_blank", @class="editForm" }))



sample MVC loop
----------------------
@foreach (var item in Model) {
<tr>
<td>@item.Artist.Name</td>
<td>@item.Title</td>
<td>@String.Format("{0:c}", item.Price)</td>
</tr>
}
</table




The JsonRequestBehavior.AllowGet parameter is necessary in this case because, by default,
ASP.NET MVC disallows returning JSON in response to an HTTP GET request
in order to avoid a potentially dangerous security vulnerability known as JSON hijacking.


the PartialViewResult renders
only the markup in the view itself and does not render any layout or master page
that the view may specify.Since partial pages do not execute the layout, you may have to include
some dependencies, such as CSS or JavaScript, directly in the partial
view rather than including them in the page’s layout.

MVC 4 features
-----------------
Bundling
webapi
mobile templates


Content negotioan
-------------------
Server will change the response formate (representation ) based on client request
if the request contains an X-Requested-With header, indicating an AJAX request, the server might default to JSON if there is no Accept header.

if the request header has below mentioned tag then the request is made by ajax
X-Requested-With: XMLHttpRequest



'Model binders' provide an easy way to extract data from various parts of an HTTP request and convert those message parts into .NET objects 

web api will support self hosting
Self-host: Web APIs can be hosted in your own process in addition to IIS while still using the full power of routes and other features of Web API.





in mvc3 webapis not thr. but we can install it usig nuget package - WebAPI pieces 

Reg: HTML Helpers
http://www.dotnet-tricks.com/Tutorial/mvc/N50P050314-Understanding-HTML-Helpers-in-ASP.NET-MVC.html


RenderPartial()//will render view without Layout

The /Views/Shared folder is a great place to keep views that are shared across multiple controllers.

Razer - Code nudget example
------------------------------------
@if(User.IsAuthenticated) {
<span>Hello, @User.Username!</span>
} else {
<span>Please @Html.ActionLink("log in")</span>
}

Razer - Code Block Example
-----------------------

@{
LayoutPage = "~/Views/Shared/_Layout.cshtml";
View.Title = "Auction " + Model.Title;
}


Layout
--------------
//In layout page
@RenderSection("Header")

//In view page
@section Header {
<h1>EBuy Online Auction Site<h1>
}



Partial View
---------------
//Partial view code .. it will be saved as normal cshtml file .. in views folder
@model Auction
<div class="auction">
<a href="@Model.Url">
<img src="@Model.ImageUrl" />
</a>
<h4><a href="@Model.Url">@Model.Title</a></h4>
<p>Current Price: @Model.CurrentPrice</p>
</div>


//Following code is in view page, here we are calling Partial view and possing the model to partial view
@foreach(var auction in Model) {
@Html.Partial("Auction", auction)
}
//when model not specified, it defaults to the model in the view from which the Html.Partial() helper was called.


//Pass value to View from controller

ViewData["Username"] = User.Identity.Username;

<h1>@ViewData["Username"] </h1>
The ViewBag property is simply a wrapper around the ViewData that exposes the ViewData dictionary as a dynamic object


Reusing the controller for different kind of response
-------------------------------------------------------------
public class AuctionsController : Controller
{
public ActionResult Auction(long id)
{
var db = new DataContext();
var auction = db.Auctions.Find(id);
// Respond to AJAX requests
if (Request.IsAjaxRequest())
return PartialView("Auction", auction);
// Respond to JSON requests
if (Request.IsJsonRequest())
return Json(auction);
// Default to a "normal" view with layout
return View("Auction", auction);
}
}


Bundling will automatically minify js and css files



Custome anotation - Start
-----------------------
  public class RequiredIfNotAttribute : RequiredAttribute
    {
        private String PropertyName { get; set; }
        private Object DesiredValue { get; set; }

        public RequiredIfNotAttribute(String propertyName, Object desiredValue)
        {
            PropertyName = propertyName;
            DesiredValue = desiredValue;
        }

        protected override ValidationResult IsValid(object value, ValidationContext context)
        {
            Object instance = context.ObjectInstance;
            Type type = instance.GetType();
            Object proprtyvalue = type.GetProperty(PropertyName).GetValue(instance, null);

            if (DesiredValue.ToString().Contains("~"))
            {
                string[] DesiredValuelist = DesiredValue.ToString().Split('~');
                Boolean listresult = false;
                foreach (string Dvalue in DesiredValuelist)
                {
                    if (proprtyvalue == null || proprtyvalue.ToString() != Dvalue)
                    {
                        listresult = true;
                    }
                    else
                    {
                        listresult = false;
                        break;
                    }
                }
                if (listresult)
                {
                    ValidationResult result = base.IsValid(value, context);
                    return result;
                }
            }
            else if (proprtyvalue == null || proprtyvalue.ToString() != DesiredValue.ToString())
            {

                ValidationResult result = base.IsValid(value, context);
                return result;
            }
            return ValidationResult.Success;
        }
    }

Ex: [RequiredIfNot("TypeOfSubmission", "2~5", ErrorMessageResourceType = typeof(Messages), ErrorMessageResourceName = "KeyNameRequired")]
Custome anotation - End
---------------------------


MVC - output caching
---------------------
//it can be action level or controller level
[OutputCache(Duration=5, VaryByParam="None")]public ActionResult Index(){ :}


Differnce between partial vw and normal vw
------------------------------------------
PartialViewResult renders
only the markup in the view itself and does not render any layout or master page
that the view may specify.
Since partial pages do not execute the layout, you may have to include
some dependencies, such as CSS or JavaScript, directly in the partial
view rather than including them in the page’s layout.
	calling partial vw from jqury
		function showAuction(auctionId) {
$('#main').load('/Auctions/PartialAuction/' + auctionId);
}


defulat content type of asp.net mvc is 
Content-Type: text/html; charset=utf-8