Strategy pattern
=========================
Define a family of algorithms, encapsulate each one, and make them interchangeable. 
Strategy lets the algorithm vary independently from clients that use it.


Ex:
class Bird{
    IFlyBehaviour objFlyBehaviour;
    setBehaviour(IFlyBehaviour _objFlyBehaviour){
        this.objFlyBehaviour=_objFlyBehaviour;   
    }
    doFly(){this.objFlyBehaviour.fly()}
}
class Duck:Bird{}
class SuperDuck:Bird{}

interface IFlyBehaviour {}
class WingFlyBehaviour:IFlyBehaviour}{}
class SuperFlyBehaviour:IFlyBehaviour}{}

#here family of fly behaviours encapsulated. and Bird class can use it by using HAS-A Relation. Advantange here is at run time we could able to change the behaviour of Bird class.

ex:
    Bird superBird = new SuperFlyBehaviour();
    superBird.setBehaviour(new SuperFlyBehaviour());
    superBird.doFly();
    superBird.setBehaviour(new WingFlyBehaviour());
    superBird.doFly();



# In above example Bird HAS A relation with FlyBehaviour.  we can able to inheri flybehaviour from bird class by having flybehaviour code in bird class. but if that behaviour
keeps changes, or if we want to add any new kind of behaviour (ex: FanFlyBhehaviour), then we have to touch bir and sub classes. so Is-A Relation is better approch

Note: Composition - when you put two classes together then it is Composition. 
Composition gives lots of flexibility.
composition helps to change the behaviour of the system at runtime
composition is used in many design patterns


template method and strategy pattern having lots of commonalities



Template method and strategy pattern having lots of commonalities
----------------------------------------------------------------------------- 
Template method is to define the outline of an algorithm, but
let   subclasses do some of the work. That
way, It can have different implementations of an algorithm’s individual steps, but keep control
over the algorithm’s structure. 
All  duplicated code gets put into the superclass, so all the subclasses can share it.
Template method It perfect for creating frameworks.

But strategy pattern will not have an controll over the algorithms. # I mean flow of steps
strategy Pattern offer clients a  choice of algorithm implementation through
object composition.
more flexible
Strategy pattern use object composition. clients can change their algorithms at runtime
simply by using a different strategy object.



The Strategy and Template
Method Patterns both
encapsulate algorithms, one
by inheritance and one by
composition.


The Factory Method is a specialization of Template 
Method.


