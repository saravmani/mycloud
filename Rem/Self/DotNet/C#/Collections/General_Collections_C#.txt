List<T> is a very commonly seen container, because it is so very versatile (with lots of handy methods like Sort, Find, etc) -
but has no extension points if you want to override any of the behaviour


Collection<T> is a wrapper around any IList<T> (defaulting to List<T>) - it
has the extension points (virtual methods), but not as many support methods like Find.
Because of the indirection, it is slightly slower than List<T>, but not by much.


# From my point
	List we cant extend ()
	Collections we can extend. because it is having more virtual methods


List<T> is intended for internal use within the application code. We should not expose it.

Collection<T> serves a base class for custom collections (although it can be used directly).

Consider using Collection<T> in your code unless there are specific features of List<T> that you need.


https://stackoverflow.com/questions/271710/collectiont-versus-listt-what-should-you-use-on-your-interfaces
