Template variables are used to pass data around within a template

The event object is assigned to a template variable called $event

Template reference variables are a
form of template variable that can be used to refer to elements within the template

<input #product class="form-control" (input)="false" />
{{product.value}}

# above code will print the user input on each key stroke

When Angular encounters a reference variable in a template, it assignes dom object of the element
to template variable. For this example, the product reference variable is assigned
 the object that represents the
input element in the DOM, the HTMLInputElement object.


Template variables can also be
used to change the state of the element,

<tr *ngFor="let item of getProducts(); let i = index"
(mouseover)="product.value=item.name" [class.bg-info]="product.value==item.name">
..
<input #product class="form-control" (input)="false" />

why (input)="false"?
Angular wonâ€™t update the data bindings in the template when the user edits the contents of the input
element unless there is an event binding on that element. Setting the binding to false gives Angular
something to evaluate just so the update process will begin and distribute the current
 contents of the input element throughout the template.

<input #product class="form-control" (keyup.enter)="selectedProduct=product.value" />

#after clicks enter key only it will work
