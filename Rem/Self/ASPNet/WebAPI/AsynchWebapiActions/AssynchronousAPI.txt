if you define a CancellationToken parameter on an action method,
Web API will provide one for you that is
triggered when the request is terminated.

public interface ICustomController {
    Task<long> GetPageSize(CancellationToken cToken);
}

public class PageSizeController : ApiController, ICustomController
{
    private static string TargetUrl = "http://apress.com";
public async Task<long> GetPageSize(CancellationToken cToken)
{
    WebClient wc = new WebClient();
    Stopwatch sw = Stopwatch.StartNew();
    List<long> results = new List<long>();
    for (int i = 0; i < 10; i++)
    {
        if (!cToken.IsCancellationRequested)
        {
            Debug.WriteLine("Making Request: {0}", i);
            byte[] apressData = await wc.DownloadDataTaskAsync(TargetUrl);
            results.Add(apressData.LongLength);
        }
        else
        {
            Debug.WriteLine("Cancelled");
            return 0;
        }
    }
    Debug.WriteLine("Elapsed ms: {0}", sw.ElapsedMilliseconds);
    return (long)results.Average();
}
}

in above example Web API asynchronous interface pattern

Dealing with Cancellation
The CancellationToken parameter is used to signal when the request has been cancelled

zero as the result from the method, although I could have returned any value
from the method because it will be
discarded.

public Task<long> GetPageSize(CancellationToken cToken)
{
    return Task<long>.Factory.StartNew(() => {
        WebClient wc = new WebClient();
        Stopwatch sw = Stopwatch.StartNew();
        List<long> results = new List<long>();
        for (int i = 0; i < 10; i++)
        {
            if (!cToken.IsCancellationRequested)
            {
                Debug.WriteLine("Making Request: {0}", i);
                results.Add(wc.DownloadData(TargetUrl).LongLength);
            }
            else
            {
                Debug.WriteLine("Cancelled");
                return 0;
            }
        }
        Debug.WriteLine("Elapsed ms: {0}", sw.ElapsedMilliseconds);
        return (long)results.Average();
    });
}

async key word required only when we use await key word
