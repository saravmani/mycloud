.NET Core is a set of runtime, library and compiler components that allow you to create apps 
that run on Windows, Mac OS X and Linux. It can be installed locally with your app with only
 the packages you need. It provides a light weight development model and the flexibility to
 work with your favorite development tools on your favorite development platform.


.NET Core consists of the CoreCLR runtime and the CoreFX framework libraries. A set of cross-platform tooling can be found in the .NET CLI. The Roslyn compiler and LLILC compiler are sibling projects that support .NET Core.


NET Core command-line (CLI) tools, used for building .NET Core apps and libraries through your development flow (compiling, NuGet package management, running, testing, .

The CoreCLR has nothing in the Global Assembly Cache and multiple versions can be installed side by side on the same machine.  
CoreCLR is a cut-down version and is optimized for high throughput with low memory – otherwise known as ‘Cloud Optimized’.
The Core CLR is fully open source and available on GitHub, and runs on Linux/Unix/OSx via Mono. 


ASP.NET vNext uses the ‘Roslyn’ compiler, which is a managed compiler written in it’s own language (the C# compiler is written in C#).  Roslyn compiler technology is fast and enables true ‘edit and run’ capabilities.  There is no need to compile an ASP.NET application and deploy the binaries, as you can just deploy the code files and let it compile in place.  Roslyn is open source and hosted on Github.

In the previous .NET versions (1.0 through 4.6) all of the libraries were installed all the time (for the desktop/server versions, anyway).  A lot of ASP.NET functionality was encapsulated in the fearsome System.Web namespace, which had everything you could possibly need to build an ASP.NET application.   As the world moves to virtual servers in cloud environments, there is a real cost to stuffing all those unused libraries in memory.  The ability to slim down an application to only the bits needed is the right direction.

DNX as an SDK containing everything needed to build and run an ASP.NET 5 application.  
DNX - .Net Execution Environment


NET Core - .NET Core runtime and framework
.NET Core SDK - .NET Core + CLI tools


DNX is a SDK and a runtime environment for creating .NET applications for Windows, Mac and Linux. Basically it allows the cross-platform development using the .NET 5 Core.
DNU is the .NET Development Utility. It allows you to build, package and publish projects created with DNX.
DNVM is the .NET Version Manager. It is basically a set of command line instructions which allow you to configure your .NET Runtime.


ASP.NET 5 is no longer coupled to IIS. Any OWIN-compatible server can host ASP.NET. You can run ASP.NET under IIS, or under a new, cross-platform HTTP server called Kestrel, or embedded in your own server applications.


ET Core is portable. If you target .NET Core, the entire runtime can be bundled and deployed side by side with your application. When Microsoft make improvements to the framework, your application can use them immediately, without affecting other applications.

NET Core can be packaged and deployed as part of your application; no global installation required.


Class libraries and some utility tools, however, will likely targetting both runtimes. So what’s needed is some way to figure out what runtime to invoke when running an application. That’s where DNX comes in.


Whether your application targets the full .NET Framework or just .NET Core, it can be executed with DNX. Think of DNX as a host for your .NET applications, 

Under DNX, this all changes. Firstly, I get to choose my runtime. Will this console application target the .NET Framework, .NET Core, or both?
#Note: Actually here we have to choose the runtime

Secondly, in development, there is no compilation step - code is compiled on the fly with Roslyn, so you’ll never see a .dll or .exe in the first place when you hit F5 locally. 


Kestrel is a cross-platform, open source HTTP server for ASP.NET 5.0. It’s built by the same team at Microsoft that built ASP.NET 5.0, and it allows ASP.NET 5.0 applications to run consistently across Windows, Linux, and OSX.

Kestrel supports http,https


I also pass the --no-source flag when publishing. This ensures that dnu publish compiles the code and only publishes the compiled output, not the source code. Without this argument, DNX will dynamically compile the application on the fly as it runs with Roslyn. The Roslyn dynamic compilation features of ASP.NET 5 were designed to make for a better development experience; there’s really no benefit to using them in production.