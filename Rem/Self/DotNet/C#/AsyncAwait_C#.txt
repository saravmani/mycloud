Async Await
------------------
Note: we cannot use await keyword within lock, unsafe  blocks

C# 8.0, you can use the await foreach statement to consume an asynchronous stream of data.


The await operator suspends evaluation of the enclosing async method until the asynchronous operation
represented by its operand completes. When the asynchronous operation completes, the await operator
returns the result of the operation, if any. When the await operator is applied to the operand that
represents already completed operation, it returns the result of the operation immediately without
suspension of the enclosing method. The await operator doesn't block the thread that evaluates the async method.

The await operator is applied to a task in an
asynchronous method to insert a suspension point in the execution of the method until the awaited task completes

# compiler will take care splitting the functions into smaller chunks
# on the line of await keyword, compiler going to split the method into multiple pieces
When the await operator is passed an already-completed task, it will extract the result and
continue executing the method (synchronously).

When the await operator is passed an incomplete task  then by default await will
capture the current context and return an incomplete task from the method.

Later, when the await task completes, the remainder of the method is scheduled to run in that context.

This "context" is SynchronizationContext. Current unless it is null, in which case it is TaskScheduler.Current.
If you're running this in a Console app, then the context is usually the thread pool context,
so the async method will resume executing on a thread pool thread. However, if you execute the same method on a UI thread,
then the context is a UI context and the async method will resume executing on the UI thread.
